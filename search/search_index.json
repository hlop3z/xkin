{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to X-Kin","text":"<p>XKin is a modern, lightweight JavaScript library designed as an alternative to jQuery, with special focus on styling, theming, and DOM manipulation. Perfect for projects where you need powerful controls without the overhead of larger frameworks.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udce6 Tiny footprint: Minimal bundle size for optimal performance</li> <li>\ud83c\udfa8 Theme system: Light/dark mode with automatic system preference detection</li> <li>\ud83e\udde9 Component styling: Clean API for managing complex component styles</li> <li>\ud83d\udcf1 Responsive layouts: Web component-based layout system with configurable regions</li> <li>\ud83d\udd0d DOM utilities: Simple element selection and manipulation</li> <li>\u26a1 Performance optimized: Includes memoization utilities for efficient rendering</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#cdn","title":"CDN","text":"<pre><code>&lt;script src=\"https://unpkg.com/xkin@latest\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"#npm","title":"NPM","text":"<pre><code>npm install xkin --save\n</code></pre> <pre><code>// ES Module\nimport { control, theme, css } from \"xkin\";\n\n// CommonJS\nconst { control, theme, css } = require(\"xkin\");\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":"Category Function Description DOM Selection <code>control()</code> Create a controller for DOM elements with enhanced methods <code>get()</code> Enhanced <code>querySelector</code> with attribute-based selection <code>find()</code> Enhanced <code>querySelectorAll</code> with attribute-based selection Styling <code>css()</code> Convert objects/arrays to CSS class strings <code>style()</code> Convert objects/arrays to CSS style strings <code>component()</code> Create reusable styled components with themes Theming <code>theme.set()</code> Configure and apply color themes <code>theme.toggle()</code> Toggle between light/dark modes <code>theme.class()</code> Generate theme class names Layout <code>layout()</code> Create web component-based layouts <code>gui()</code> Initialize and configure layout controls <code>$gui</code> Access configured layout elements Utilities <code>blank()</code> Generate objects from schemas <code>memoize()</code> Cache function results for performance <code>memoizeOne()</code> Cache only the most recent function result"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>// Configure a theme\nxkin.theme.set({\n  darkMode: window.matchMedia(\"(prefers-color-scheme: dark)\").matches,\n  base: {\n    primary: \"#4361ee\",\n    secondary: \"#3f37c9\",\n    success: \"#4caf50\",\n    danger: \"#f44336\",\n  },\n  dark: {\n    primary: \"#4895ef\",\n    secondary: \"#4cc9f0\",\n    success: \"#0f5132\",\n    danger: \"#b71c1c\",\n  },\n});\n\n// Control an element\nconst button = xkin.control(\"#my-button\");\nbutton.add(\"color-bg-primary\");\nbutton.on(\"click\", () =&gt; xkin.theme.toggle());\n</code></pre>"},{"location":"component/","title":"Component Styling","text":"<p>Component styling system provides a clean, declarative way to create reusable UI components with consistent styling. It separates static base styles from dynamic styles and supports multiple themes.</p>"},{"location":"component/#overview","title":"Overview","text":"<p>The component system enables you to:</p> <ul> <li>Define reusable UI component styles with a declarative API</li> <li>Separate static styles from dynamic styles that depend on props</li> <li>Apply different themes to components based on state or context</li> <li>Handle additional attributes like ARIA properties or data attributes</li> </ul>"},{"location":"component/#api-reference","title":"API Reference","text":"<pre><code>const myComponent = xkin.component(componentConfig);\nconst instance = myComponent(props);\n</code></pre>"},{"location":"component/#component-configuration","title":"Component Configuration","text":"Property Type Description <code>base</code> Object Static core styles that don't change based on props <code>setup(props)</code> Function Function that returns dynamic styles based on props <code>attrs(props)</code> Function Function that returns additional HTML attributes <code>theme</code> Object Theme variations with their own class and style definitions"},{"location":"component/#component-instance-result","title":"Component Instance Result","text":"Property Type Description <code>class</code> String Combined CSS classes from base and setup <code>style</code> String Combined inline styles from base and setup <code>attrs</code> Object Additional HTML attributes from the attrs function <code>theme(name)</code> Function Function to apply a specific theme"},{"location":"component/#basic-example","title":"Basic Example","text":"<pre><code>// Define a button component\nconst Button = xkin.component({\n  // Static base styles\n  base: {\n    class: \"btn\",\n    style: \"display: inline-block; padding: 8px 16px; border-radius: 4px; cursor: pointer;\",\n  },\n\n  // Dynamic styles based on props\n  setup: ({ size, disabled, fullWidth }) =&gt; ({\n    class: {\n      \"btn-sm\": size === \"small\",\n      \"btn-lg\": size === \"large\",\n      \"btn-disabled\": disabled,\n      \"btn-block\": fullWidth,\n    },\n    style: disabled ? \"opacity: 0.6; pointer-events: none;\" : \"\",\n  }),\n\n  // Additional HTML attributes\n  attrs: (props) =&gt; ({\n    type: props.type || \"button\",\n    \"aria-disabled\": props.disabled ? \"true\" : \"false\",\n    \"data-size\": props.size || \"default\",\n  }),\n\n  // Theme variations\n  theme: {\n    primary: {\n      class: \"color-bg-primary color-tx-white\",\n      style: \"border: none;\",\n    },\n    secondary: {\n      class: \"color-bg-secondary color-tx-white\",\n      style: \"border: none;\",\n    },\n    outline: {\n      class: \"color-tx-primary\",\n      style: \"background: transparent; border: 1px solid currentColor;\",\n    },\n  },\n});\n\n// Use the component with specific props\nconst submitButton = Button({\n  size: \"large\",\n  disabled: false,\n  fullWidth: true,\n  type: \"submit\",\n});\n\nconsole.log(submitButton);\n// {\n//   class: \"btn btn-lg btn-block\",\n//   style: \"display: inline-block; padding: 8px 16px; border-radius: 4px; cursor: pointer;\",\n//   attrs: {\n//     type: \"submit\",\n//     \"aria-disabled\": \"false\",\n//     \"data-size\": \"large\"\n//   },\n//   theme: [Function]\n// }\n\n// Apply a theme\nconst primaryButton = submitButton.theme(\"primary\");\nconsole.log(primaryButton);\n// {\n//   class: \"btn btn-lg btn-block color-bg-primary color-tx-white\",\n//   style: \"display: inline-block; padding: 8px 16px; border-radius: 4px; cursor: pointer; border: none;\"\n// }\n</code></pre>"},{"location":"component/#dynamic-property-examples","title":"Dynamic Property Examples","text":""},{"location":"component/#conditional-classes","title":"Conditional Classes","text":"<pre><code>const Card = xkin.component({\n  base: {\n    class: \"card\",\n    style: \"border-radius: 8px; overflow: hidden;\",\n  },\n  setup: ({ elevated, interactive, padding = \"normal\" }) =&gt; ({\n    class: {\n      \"card-elevated\": elevated,\n      \"card-interactive\": interactive,\n      \"card-padding-sm\": padding === \"small\",\n      \"card-padding-lg\": padding === \"large\",\n    },\n    style: elevated ? \"box-shadow: 0 4px 8px rgba(0,0,0,0.1);\" : \"\",\n  }),\n});\n</code></pre>"},{"location":"component/#dynamic-styles","title":"Dynamic Styles","text":"<pre><code>const Box = xkin.component({\n  base: {\n    class: \"box\",\n    style: \"display: block;\",\n  },\n  setup: ({ width, height, margin, padding, color }) =&gt; ({\n    style: {\n      width: width,\n      height: height,\n      margin: margin,\n      padding: padding,\n      backgroundColor: color,\n    },\n  }),\n});\n\nconst redBox = Box({\n  width: \"200px\",\n  height: \"100px\",\n  padding: \"16px\",\n  color: \"#f44336\",\n});\n</code></pre>"},{"location":"component/#integration-with-dom","title":"Integration with DOM","text":"<p>Use component styles with DOM elements:</p> <pre><code>// Define the component\nconst Input = xkin.component({\n  base: {\n    class: \"input\",\n    style: \"padding: 8px; border: 1px solid #ccc; border-radius: 4px;\",\n  },\n  setup: ({ invalid, disabled, size }) =&gt; ({\n    class: {\n      \"input-invalid\": invalid,\n      \"input-disabled\": disabled,\n      \"input-sm\": size === \"small\",\n      \"input-lg\": size === \"large\",\n    },\n    style: invalid ? \"border-color: #dc3545;\" : \"\",\n  }),\n  attrs: (props) =&gt; ({\n    type: props.type || \"text\",\n    disabled: props.disabled ? true : undefined,\n    \"aria-invalid\": props.invalid ? \"true\" : \"false\",\n  }),\n});\n\n// Apply to a DOM element\ndocument.addEventListener(\"DOMContentLoaded\", () =&gt; {\n  const inputElement = document.getElementById(\"username\");\n  const inputControl = xkin.control(inputElement);\n\n  // Get component styles with specific props\n  const inputStyles = Input({\n    invalid: !inputElement.checkValidity(),\n    size: \"large\",\n    type: \"email\",\n  });\n\n  // Apply classes and styles\n  inputControl.add(inputStyles.class);\n  inputElement.style = inputStyles.style;\n\n  // Apply attributes\n  Object.entries(inputStyles.attrs).forEach(([key, value]) =&gt; {\n    if (value !== undefined) {\n      inputElement.setAttribute(key, value);\n    }\n  });\n});\n</code></pre>"},{"location":"component/#performance-considerations","title":"Performance Considerations","text":"<p>Component system uses memoization internally to optimize performance. The <code>setup</code> and <code>attrs</code> functions are only re-executed when their input props change.</p> <p>For even better performance with frequently updating components, consider using <code>xkin.memoizeOne</code> for your custom setup functions:</p> <pre><code>const optimizedSetup = xkin.memoizeOne((props) =&gt; ({\n  class: {\n    \"item-selected\": props.selected,\n    \"item-active\": props.active,\n  },\n  style: {\n    opacity: props.opacity,\n  },\n}));\n\nconst ListItem = xkin.component({\n  base: { class: \"list-item\" },\n  setup: optimizedSetup,\n});\n</code></pre>"},{"location":"control/","title":"DOM Control","text":"<p>Provides a powerful, jQuery-like API for DOM manipulation through the <code>control()</code> function. This module gives you a fluent interface for managing DOM elements with minimal code.</p>"},{"location":"control/#overview","title":"Overview","text":"<p>The DOM control system allows you to:</p> <ul> <li>Select and manipulate DOM elements using CSS selectors or direct element references</li> <li>Add, remove, and toggle CSS classes with a clean API</li> <li>Show and hide elements while preserving display properties</li> <li>Find child elements with enhanced selector methods</li> <li>Apply component themes directly to elements</li> <li>Chain methods for concise operations</li> </ul>"},{"location":"control/#api-reference","title":"API Reference","text":"<pre><code>const elementControl = xkin.control(selectorOrElement);\n</code></pre>"},{"location":"control/#parameters","title":"Parameters","text":"Parameter Type Description <code>selectorOrElement</code> String | Element CSS selector or DOM element reference"},{"location":"control/#return-value","title":"Return Value","text":"<p>The <code>control()</code> function returns an element controller object with the following methods and properties:</p> Method/Property Description <code>current</code> Direct reference to the DOM element <code>add(...classes)</code> Add one or more CSS classes <code>remove(...classes)</code> Remove one or more CSS classes <code>toggle(...classes)</code> Toggle one or more CSS classes <code>contains(className)</code> Check if element has a specific class <code>find(selector)</code> Find descendant elements (returns array of controllers) <code>get(selector)</code> Find first matching descendant (returns controller) <code>hide()</code> Hide the element while preserving its display property <code>show()</code> Restore the element to its original display property <code>css(options)</code> Apply component styling configuration <code>theme(themeName)</code> Apply a specific theme from the component styling"},{"location":"control/#basic-usage","title":"Basic Usage","text":""},{"location":"control/#selecting-elements","title":"Selecting Elements","text":"<pre><code>// Select an element with a CSS selector\nconst button = xkin.control(\"#submit-button\");\n\n// Or with an existing element reference\nconst headerElement = document.querySelector(\"header\");\nconst header = xkin.control(headerElement);\n</code></pre>"},{"location":"control/#class-manipulation","title":"Class Manipulation","text":"<pre><code>// Element with multiple classes\nconst card = xkin.control(\".card\");\n\n// Add classes\ncard.add(\"active\", \"highlighted\");\n\n// Remove classes\ncard.remove(\"loading\");\n\n// Toggle classes (add if absent, remove if present)\ncard.toggle(\"expanded\");\n\n// Check if element has a class\nif (card.contains(\"active\")) {\n  console.log(\"Card is active\");\n}\n</code></pre>"},{"location":"control/#show-and-hide","title":"Show and Hide","text":"<p>The show and hide methods intelligently preserve the original display property:</p> <pre><code>const notification = xkin.control(\"#notification\");\n\n// Hide the notification\nnotification.hide();\n\n// Show it again later\nsetTimeout(() =&gt; {\n  notification.show();\n}, 3000);\n</code></pre>"},{"location":"control/#element-traversal","title":"Element Traversal","text":"<p>Find child elements within the controlled element:</p> <pre><code>const form = xkin.control(\"#registration-form\");\n\n// Get a single child element\nconst emailField = form.get(\".email-field\");\n\n// Get multiple child elements\nconst allInputs = form.find(\"input\");\n\n// Chain operations\nform.find(\"button\").forEach((button) =&gt; {\n  button.add(\"form-button\");\n});\n\n// Access native DOM element when needed\nconsole.log(form.current.getAttribute(\"data-form-id\"));\n</code></pre>"},{"location":"control/#advanced-usage","title":"Advanced Usage","text":""},{"location":"control/#applying-component-styles","title":"Applying Component Styles","text":"<p>The <code>css()</code> method allows you to apply component-style configurations directly to elements:</p> <pre><code>const button = xkin.control(\"#action-button\");\n\n// Define component themes\nbutton.css({\n  theme: {\n    primary: {\n      class: \"color-bg-primary color-tx-white\",\n      style: \"border: none;\",\n    },\n    secondary: {\n      class: \"color-bg-secondary\",\n      style: \"border: 1px solid currentColor;\",\n    },\n    danger: {\n      class: \"color-bg-danger color-tx-white\",\n      style: \"border: none;\",\n    },\n  },\n  // Base styling\n  base: {\n    class: \"button\",\n    style: \"padding: 8px 16px; border-radius: 4px; cursor: pointer;\",\n  },\n});\n\n// Apply the primary theme\nbutton.theme(\"primary\");\n\n// Change to danger theme on hover\nbutton.current.addEventListener(\"mouseover\", () =&gt; {\n  button.theme(\"danger\");\n});\n\n// Revert to primary theme on mouseout\nbutton.current.addEventListener(\"mouseout\", () =&gt; {\n  button.theme(\"primary\");\n});\n</code></pre>"},{"location":"control/#event-handling-helper","title":"Event Handling Helper","text":"<p>You can extend the controller with event handling methods:</p> <pre><code>// Add event handling extension\nxkin.control.prototype.on = function (eventType, handler) {\n  this.current.addEventListener(eventType, handler);\n  return this;\n};\n\nxkin.control.prototype.off = function (eventType, handler) {\n  this.current.removeEventListener(eventType, handler);\n  return this;\n};\n\n// Now use in a chainable way\nxkin\n  .control(\"#toggle-button\")\n  .add(\"active\")\n  .on(\"click\", () =&gt; console.log(\"Button clicked\"))\n  .on(\"mouseover\", () =&gt; console.log(\"Button hover\"));\n</code></pre>"},{"location":"control/#dynamic-content-insertion","title":"Dynamic Content Insertion","text":"<p>Combine with modern JavaScript for dynamic content:</p> <pre><code>const todoList = xkin.control(\"#todo-list\");\nconst addTodoBtn = xkin.control(\"#add-todo\");\n\n// Add new items dynamically\naddTodoBtn.on(\"click\", () =&gt; {\n  const newItem = document.createElement(\"li\");\n  newItem.textContent = `Task ${todoList.find(\"li\").length + 1}`;\n  todoList.current.appendChild(newItem);\n\n  // Control the new element\n  const itemControl = xkin.control(newItem);\n  itemControl.add(\"new-item\");\n\n  // Animate entry\n  setTimeout(() =&gt; itemControl.add(\"visible\"), 10);\n});\n</code></pre>"},{"location":"control/#integration-with-theme-system","title":"Integration with Theme System","text":"<p>The control module integrates seamlessly with XKin's theme system:</p> <pre><code>// First, set up a theme\nxkin.theme.set({\n  base: {\n    primary: \"#4361ee\",\n    secondary: \"#3f37c9\",\n    danger: \"#ef233c\",\n  },\n});\n\n// Control elements and apply theme colors\nconst header = xkin.control(\"header\");\nheader.add(\"color-bg-primary\");\n\n// Dynamically update when theme changes\nconst themeToggle = xkin.control(\"#theme-toggle\");\nthemeToggle.on(\"click\", () =&gt; {\n  xkin.theme.toggle();\n\n  // Update element classes based on theme\n  const isDark = xkin.theme.info.isDark;\n  header.toggle(\"dark-mode\");\n\n  const buttons = xkin.find(\".button\");\n  buttons.forEach((btn) =&gt; {\n    btn.remove(\"color-bg-primary\", \"color-bg-secondary\");\n    btn.add(isDark ? \"color-bg-secondary\" : \"color-bg-primary\");\n  });\n});\n</code></pre>"},{"location":"control/#performance-considerations","title":"Performance Considerations","text":"<p>For optimal performance when working with many elements:</p> <ol> <li>Use <code>find()</code> to get a collection once, then iterate over it rather than selecting elements repeatedly</li> <li>Batch class changes when possible rather than adding/removing classes one at a time</li> <li>For complex DOM manipulations, consider using document fragments before adding to the live DOM</li> </ol> <pre><code>// Inefficient\nfor (let i = 0; i &lt; 100; i++) {\n  const item = xkin.control(`#item-${i}`);\n  item.add(\"processed\");\n}\n\n// More efficient\nconst items = xkin.find(\".item\");\nitems.forEach((item) =&gt; {\n  item.add(\"processed\");\n});\n</code></pre>"},{"location":"gui/","title":"GUI Management","text":"<p>GUI management provides a simple way to access and control layout elements through a centralized API. This system makes it easy to manipulate sidebars, headers, and other layout elements without complex DOM queries.</p>"},{"location":"gui/#overview","title":"Overview","text":"<p>The GUI system consists of two main components:</p> <ul> <li><code>gui()</code> - Initializes references to elements using custom attribute selectors</li> <li><code>$gui</code> - An object containing references to the initialized elements</li> </ul>"},{"location":"gui/#api-reference","title":"API Reference","text":"<pre><code>// Initialize GUI elements\nxkin.gui(attributeName, elementsMap);\n\n// Access GUI elements\nxkin.$gui.elementKey;\n</code></pre>"},{"location":"gui/#parameters","title":"Parameters","text":"Parameter Type Description <code>attributeName</code> String The HTML attribute used to identify elements <code>elementsMap</code> Object Object mapping keys to attribute values"},{"location":"gui/#return-value","title":"Return Value","text":"<p>The <code>gui()</code> function initializes the global <code>$gui</code> object with references to the selected elements. Each element is accessible using the key specified in the <code>elementsMap</code>.</p>"},{"location":"gui/#basic-example","title":"Basic Example","text":"<pre><code>&lt;div id=\"app\"&gt;\n  &lt;!-- Elements with custom attribute identifiers --&gt;\n  &lt;header x-region=\"app-header\"&gt;Site Header&lt;/header&gt;\n  &lt;aside x-region=\"left-sidebar\"&gt;Left Sidebar&lt;/aside&gt;\n  &lt;aside x-region=\"right-sidebar\"&gt;Right Sidebar&lt;/aside&gt;\n  &lt;div x-region=\"content-area\"&gt;Main Content&lt;/div&gt;\n  &lt;footer x-region=\"app-footer\"&gt;Site Footer&lt;/footer&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  // Initialize GUI with references to elements\n  xkin.gui(\"x-region\", {\n    header: \"app-header\",\n    left: \"left-sidebar\",\n    right: \"right-sidebar\",\n    content: \"content-area\",\n    footer: \"app-footer\",\n  });\n\n  // Now each element can be accessed and controlled via $gui\n  console.log(xkin.$gui.header.current); // DOM element reference\n\n  // Add classes to elements\n  xkin.$gui.header.add(\"sticky-header\");\n  xkin.$gui.left.add(\"expanded\");\n\n  // Toggle sidebar visibility\n  document.getElementById(\"toggle-left\").addEventListener(\"click\", () =&gt; {\n    xkin.$gui.left.toggle(\"visible\");\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"gui/#integration-with-layout-component","title":"Integration with Layout Component","text":"<p>The GUI system works especially well with the layout component. When used together, they provide a powerful way to manage complex responsive layouts:</p> <pre><code>&lt;app-layout&gt;\n  &lt;header slot=\"header\" x-part=\"header\"&gt;Header&lt;/header&gt;\n  &lt;nav slot=\"left\" x-part=\"nav\"&gt;Navigation&lt;/nav&gt;\n  &lt;nav slot=\"left-mini\" x-part=\"mini-nav\"&gt;Mini Nav&lt;/nav&gt;\n  &lt;main slot=\"main\" class=\"clip-top clip-left\"&gt;Main Content&lt;/main&gt;\n&lt;/app-layout&gt;\n\n&lt;button id=\"toggle-nav\"&gt;Toggle Navigation&lt;/button&gt;\n\n&lt;script&gt;\n  // Initialize layout\n  xkin.layout({ name: \"app-layout\" });\n\n  // Initialize GUI\n  xkin.gui(\"x-part\", {\n    header: \"header\",\n    nav: \"nav\",\n    miniNav: \"mini-nav\",\n  });\n\n  // Toggle navigation with smooth transitions\n  document.getElementById(\"toggle-nav\").addEventListener(\"click\", () =&gt; {\n    // Toggle between full and mini navigation\n    if (xkin.$gui.nav.contains(\"open-sidebar\")) {\n      xkin.$gui.nav.remove(\"open-sidebar\");\n      xkin.$gui.miniNav.add(\"open-sidebar\");\n    } else {\n      xkin.$gui.nav.add(\"open-sidebar\");\n      xkin.$gui.miniNav.remove(\"open-sidebar\");\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"gui/#dynamically-updating-gui-references","title":"Dynamically Updating GUI References","text":"<p>If your application changes the DOM after initialization, you can update the GUI references:</p> <pre><code>// Initial setup\nxkin.gui(\"data-panel\", {\n  main: \"dashboard\",\n});\n\n// Later, when navigation changes panels\nfunction navigateTo(panelId) {\n  // Add new panel\n  document.getElementById(\"container\").innerHTML = `\n    &lt;div data-panel=\"${panelId}\"&gt;New Panel Content&lt;/div&gt;\n  `;\n\n  // Update GUI reference\n  xkin.gui(\"data-panel\", {\n    main: panelId,\n  });\n\n  // Now you can use the updated reference\n  xkin.$gui.main.add(\"panel-visible\");\n}\n</code></pre>"},{"location":"gui/#multiple-attribute-selection","title":"Multiple Attribute Selection","text":"<p>The GUI system also supports selecting multiple elements with the same attribute value using the <code>find</code> function:</p> <pre><code>&lt;div class=\"tabs\"&gt;\n  &lt;button x-tab=\"settings\" class=\"active\"&gt;General&lt;/button&gt;\n  &lt;button x-tab=\"settings\"&gt;Profile&lt;/button&gt;\n  &lt;button x-tab=\"settings\"&gt;Security&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  // Find all tab elements\n  const tabs = xkin.find(\"x-tab\", \"settings\");\n\n  // Loop through and add click listeners\n  tabs.forEach((tab) =&gt; {\n    tab.on(\"click\", () =&gt; {\n      // Remove active class from all tabs\n      tabs.forEach((t) =&gt; t.remove(\"active\"));\n      // Add active class to clicked tab\n      tab.add(\"active\");\n    });\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"gui/#useful-patterns","title":"Useful Patterns","text":""},{"location":"gui/#toggling-sidebars","title":"Toggling Sidebars","text":"<pre><code>const toggleSidebar = (side) =&gt; {\n  const isOpen = xkin.$gui[side].contains(\"open-sidebar\");\n\n  if (isOpen) {\n    xkin.$gui[side].remove(\"open-sidebar\");\n  } else {\n    // Close other sidebars first\n    if (side === \"left\" &amp;&amp; xkin.$gui.right) {\n      xkin.$gui.right.remove(\"open-sidebar\");\n    } else if (side === \"right\" &amp;&amp; xkin.$gui.left) {\n      xkin.$gui.left.remove(\"open-sidebar\");\n    }\n\n    // Open requested sidebar\n    xkin.$gui[side].add(\"open-sidebar\");\n  }\n};\n\n// Usage\ndocument.getElementById(\"left-button\").onclick = () =&gt; toggleSidebar(\"left\");\ndocument.getElementById(\"right-button\").onclick = () =&gt; toggleSidebar(\"right\");\n</code></pre>"},{"location":"gui/#responsive-behavior","title":"Responsive Behavior","text":"<pre><code>// Handle responsive layout\nwindow.addEventListener(\"resize\", () =&gt; {\n  const isMobile = window.innerWidth &lt; 768;\n\n  if (isMobile) {\n    // On mobile, close main sidebar and show mini if needed\n    xkin.$gui.left.remove(\"open-sidebar\");\n\n    if (document.body.classList.contains(\"nav-open\")) {\n      xkin.$gui.leftMini.add(\"open-sidebar\");\n    }\n  } else {\n    // On desktop, show main sidebar and hide mini\n    xkin.$gui.left.add(\"open-sidebar\");\n    xkin.$gui.leftMini.remove(\"open-sidebar\");\n  }\n});\n</code></pre>"},{"location":"layout/","title":"Layout System","text":"<p>Layout system provides a powerful, web component-based approach to page layouts. It makes it easy to create responsive layouts with headers, footers, sidebars, and main content.</p>"},{"location":"layout/#overview","title":"Overview","text":"<p>The layout system offers:</p> <ul> <li>A custom web component for consistent layout structure</li> <li>Configurable dimensions for all layout regions</li> <li>Automatic responsive behavior with configurable breakpoints</li> <li>Transition effects and z-index management</li> <li>Support for mini sidebar states for collapsed views</li> </ul>"},{"location":"layout/#layout-regions","title":"Layout Regions","text":"<p>The layout component supports these slot regions:</p> <ul> <li><code>header</code> - Fixed top header area</li> <li><code>footer</code> - Fixed bottom footer area</li> <li><code>left</code> - Main left sidebar</li> <li><code>left-mini</code> - Collapsed version of left sidebar</li> <li><code>right</code> - Main right sidebar</li> <li><code>right-mini</code> - Collapsed version of right sidebar</li> <li><code>main</code> - Main content area</li> </ul>"},{"location":"layout/#configuration-options","title":"Configuration Options","text":"<pre><code>xkin.layout({\n  // Component name (used in HTML)\n  name: \"app-layout\",\n\n  // Responsive breakpoint (px) for mobile view\n  breakPoint: 1024,\n\n  // Transition duration for animations\n  transitionDuration: \"0.3s\",\n\n  // Region dimensions\n  sizeHeader: \"60px\",\n  sizeFooter: \"40px\",\n  sizeLeft: \"250px\",\n  sizeRight: \"200px\",\n  sizeLeftMini: \"60px\",\n  sizeRightMini: \"60px\",\n\n  // Z-index values for proper layering\n  zHeader: \"100\",\n  zFooter: \"100\",\n  zLeft: \"102\",\n  zRight: \"102\",\n});\n</code></pre>"},{"location":"layout/#basic-usage","title":"Basic Usage","text":"<pre><code>&lt;app-layout&gt;\n  &lt;!-- Header region --&gt;\n  &lt;header slot=\"header\" class=\"app-header\"&gt;\n    &lt;h1&gt;My Application&lt;/h1&gt;\n  &lt;/header&gt;\n\n  &lt;!-- Primary left sidebar --&gt;\n  &lt;nav slot=\"left\" class=\"app-sidebar\"&gt;\n    &lt;ul class=\"nav-menu\"&gt;\n      &lt;li&gt;Dashboard&lt;/li&gt;\n      &lt;li&gt;Reports&lt;/li&gt;\n      &lt;li&gt;Settings&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n\n  &lt;!-- Collapsed left sidebar (mobile or collapsed state) --&gt;\n  &lt;nav slot=\"left-mini\" class=\"app-sidebar-mini\"&gt;\n    &lt;ul class=\"nav-menu-icons\"&gt;\n      &lt;li&gt;\ud83d\udcca&lt;/li&gt;\n      &lt;li&gt;\ud83d\udcdd&lt;/li&gt;\n      &lt;li&gt;\u2699\ufe0f&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n\n  &lt;!-- Main content area with clipping to respect headers/footers/sidebars --&gt;\n  &lt;main slot=\"main\" class=\"clip-top clip-bottom clip-left clip-right\"&gt;\n    &lt;div class=\"content-wrapper\"&gt;\n      &lt;h2&gt;Dashboard&lt;/h2&gt;\n      &lt;p&gt;Welcome to your application dashboard!&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/main&gt;\n\n  &lt;!-- Footer region --&gt;\n  &lt;footer slot=\"footer\" class=\"app-footer\"&gt;\n    &lt;p&gt;\u00a9 2023 My Company&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/app-layout&gt;\n</code></pre>"},{"location":"layout/#responsive-behavior","title":"Responsive Behavior","text":"<p>The layout automatically adjusts to screen size based on the configured breakpoint:</p> <ul> <li>Desktop Mode (&gt; breakpoint): Shows full sidebars if they're open</li> <li>Mobile Mode (\u2264 breakpoint): Main content takes full width, sidebars overlay content when open</li> </ul>"},{"location":"layout/#css-helper-classes","title":"CSS Helper Classes","text":"<p>The layout component provides utility classes for managing the layout:</p> Class Purpose <code>clip-top</code> Adjusts top position to account for header <code>clip-bottom</code> Adjusts bottom position to account for footer <code>clip-left</code> Adjusts left position to account for left sidebar <code>clip-right</code> Adjusts right position to account for right sidebar <code>open-sidebar</code> Applies transform to show a sidebar when added to sidebar elements"},{"location":"layout/#sidebar-control-example","title":"Sidebar Control Example","text":"<pre><code>// First, initialize the GUI with element selectors\nxkin.gui(\"data-region\", {\n  left: \"main-nav\",\n  right: \"side-panel\",\n  leftMini: \"mini-nav\",\n  rightMini: \"mini-panel\",\n});\n\n// Now control sidebar visibility using references from $gui\ndocument.getElementById(\"toggle-left\").addEventListener(\"click\", () =&gt; {\n  // Toggle left sidebar visibility based on screen size\n  if (window.innerWidth &lt;= 1024) {\n    // On mobile, show the mini sidebar\n    xkin.$gui.leftMini.add(\"open-sidebar\");\n    xkin.$gui.left.remove(\"open-sidebar\");\n  } else {\n    // On desktop, toggle between regular and mini sidebar\n    if (xkin.$gui.left.contains(\"open-sidebar\")) {\n      xkin.$gui.left.remove(\"open-sidebar\");\n      xkin.$gui.leftMini.add(\"open-sidebar\");\n    } else {\n      xkin.$gui.left.add(\"open-sidebar\");\n      xkin.$gui.leftMini.remove(\"open-sidebar\");\n    }\n  }\n});\n</code></pre>"},{"location":"layout/#responsive-layout-example","title":"Responsive Layout Example","text":"<p>Here's a complete example of a responsive layout with dynamic sidebar controls:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;XKin Layout Example&lt;/title&gt;\n    &lt;script src=\"https://unpkg.com/xkin@latest\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n      body {\n        margin: 0;\n        font-family: system-ui, sans-serif;\n      }\n      .app-header {\n        background: #333;\n        color: white;\n        display: flex;\n        align-items: center;\n        padding: 0 20px;\n      }\n      .app-footer {\n        background: #333;\n        color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      .sidebar {\n        background: #f5f5f5;\n        height: 100%;\n        overflow: auto;\n        padding: 20px;\n      }\n      .sidebar-mini {\n        background: #f5f5f5;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding-top: 20px;\n      }\n      .content {\n        padding: 20px;\n        max-width: 1200px;\n        margin: 0 auto;\n      }\n      .icon-button {\n        background: none;\n        border: none;\n        font-size: 24px;\n        cursor: pointer;\n        margin-right: 20px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;app-layout&gt;\n      &lt;header slot=\"header\" class=\"app-header\"&gt;\n        &lt;button id=\"toggle-sidebar\" class=\"icon-button\"&gt;\u2630&lt;/button&gt;\n        &lt;h1&gt;My App&lt;/h1&gt;\n      &lt;/header&gt;\n\n      &lt;nav slot=\"left\" class=\"sidebar\" data-region=\"main-nav\"&gt;\n        &lt;h3&gt;Navigation&lt;/h3&gt;\n        &lt;ul&gt;\n          &lt;li&gt;&lt;a href=\"#\"&gt;Dashboard&lt;/a&gt;&lt;/li&gt;\n          &lt;li&gt;&lt;a href=\"#\"&gt;Projects&lt;/a&gt;&lt;/li&gt;\n          &lt;li&gt;&lt;a href=\"#\"&gt;Reports&lt;/a&gt;&lt;/li&gt;\n          &lt;li&gt;&lt;a href=\"#\"&gt;Settings&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/nav&gt;\n\n      &lt;nav slot=\"left-mini\" class=\"sidebar-mini\" data-region=\"mini-nav\"&gt;\n        &lt;div&gt;\ud83d\udcca&lt;/div&gt;\n        &lt;div&gt;\ud83d\udcc1&lt;/div&gt;\n        &lt;div&gt;\ud83d\udcdd&lt;/div&gt;\n        &lt;div&gt;\u2699\ufe0f&lt;/div&gt;\n      &lt;/nav&gt;\n\n      &lt;main slot=\"main\" class=\"content clip-top clip-bottom clip-left\"&gt;\n        &lt;h2&gt;Welcome to the Dashboard&lt;/h2&gt;\n        &lt;p&gt;This is a responsive layout built with XKin layout system.&lt;/p&gt;\n        &lt;p&gt;Try resizing your browser or clicking the menu button to see how the layout responds.&lt;/p&gt;\n      &lt;/main&gt;\n\n      &lt;footer slot=\"footer\" class=\"app-footer\"&gt;\n        &lt;p&gt;\u00a9 2023 XKin Example&lt;/p&gt;\n      &lt;/footer&gt;\n    &lt;/app-layout&gt;\n\n    &lt;script&gt;\n      // Initialize the layout\n      xkin.layout({\n        name: \"app-layout\",\n        breakPoint: 768,\n        sizeHeader: \"60px\",\n        sizeFooter: \"40px\",\n        sizeLeft: \"250px\",\n        sizeLeftMini: \"60px\",\n      });\n\n      // Set up the GUI controls\n      xkin.gui(\"data-region\", {\n        left: \"main-nav\",\n        leftMini: \"mini-nav\",\n      });\n\n      // Default state - on desktop show full sidebar, on mobile show none\n      if (window.innerWidth &gt; 768) {\n        xkin.$gui.left.add(\"open-sidebar\");\n      }\n\n      // Toggle sidebar on button click\n      document.getElementById(\"toggle-sidebar\").addEventListener(\"click\", () =&gt; {\n        if (window.innerWidth &lt;= 768) {\n          // On mobile, toggle between showing and hiding the mini sidebar\n          if (xkin.$gui.leftMini.contains(\"open-sidebar\")) {\n            xkin.$gui.leftMini.remove(\"open-sidebar\");\n          } else {\n            xkin.$gui.leftMini.add(\"open-sidebar\");\n          }\n        } else {\n          // On desktop, toggle between full and mini sidebar\n          if (xkin.$gui.left.contains(\"open-sidebar\")) {\n            xkin.$gui.left.remove(\"open-sidebar\");\n            xkin.$gui.leftMini.add(\"open-sidebar\");\n          } else {\n            xkin.$gui.left.add(\"open-sidebar\");\n            xkin.$gui.leftMini.remove(\"open-sidebar\");\n          }\n        }\n      });\n\n      // Handle window resize\n      window.addEventListener(\"resize\", () =&gt; {\n        if (window.innerWidth &lt;= 768) {\n          // On mobile, close both sidebars\n          xkin.$gui.left.remove(\"open-sidebar\");\n          xkin.$gui.leftMini.remove(\"open-sidebar\");\n        }\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"theme/","title":"Theme System","text":"<p>The theme system provides a powerful way to manage colors and styles across your application. It generates CSS classes for different color types and supports automatic light/dark mode switching.</p>"},{"location":"theme/#overview","title":"Overview","text":"<p>The theme system:</p> <ul> <li>Automatically generates CSS classes for your color palette</li> <li>Supports light and dark mode with system preference detection</li> <li>Applies colors to backgrounds, text, borders, and tables</li> <li>Allows toggling between themes at runtime</li> </ul>"},{"location":"theme/#api-reference","title":"API Reference","text":"Method Description <code>theme.set(config)</code> Configure and apply your theme system <code>theme.toggle([forceDark])</code> Toggle between light/dark themes (optional boolean to force a specific mode) <code>theme.class(type, name)</code> Get CSS class name for a specific color and type <code>theme.info</code> Get current theme status and configuration"},{"location":"theme/#color-types","title":"Color Types","text":"<p>XKin provides four different color types that can be applied to elements:</p> Type CSS Class Description Background <code>color-bg-*</code> Apply colors to element backgrounds Text <code>color-tx-*</code> Apply colors to text content Border <code>color-br-*</code> Apply colors to element borders Table <code>color-tb-*</code> Apply zebra striping to tables"},{"location":"theme/#usage-examples","title":"Usage Examples","text":""},{"location":"theme/#getting-theme-classes","title":"Getting Theme Classes","text":"<pre><code>// Get the CSS class for the \"primary\" color background\nconst primaryBgClass = xkin.theme.class(\"background\", \"primary\"); // Returns \"color-bg-primary\"\n\n// Get the CSS class for the \"danger\" text color\nconst dangerTextClass = xkin.theme.class(\"text\", \"danger\"); // Returns \"color-tx-danger\"\n</code></pre>"},{"location":"theme/#applying-theme-classes-in-html","title":"Applying Theme Classes in HTML","text":"<pre><code>&lt;!-- Apply background color --&gt;\n&lt;div class=\"color-bg-primary\"&gt;Primary background&lt;/div&gt;\n\n&lt;!-- Apply text color --&gt;\n&lt;div class=\"color-tx-danger\"&gt;Danger text&lt;/div&gt;\n\n&lt;!-- Apply border color --&gt;\n&lt;div class=\"color-br-secondary\"&gt;Element with secondary border&lt;/div&gt;\n\n&lt;!-- Apply table zebra styling --&gt;\n&lt;table class=\"color-tb-light\"&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Row 1&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Row 2&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"theme/#configuration-options","title":"Configuration Options","text":"<p>The <code>theme.set()</code> method accepts a configuration object with the following options:</p> Option Type Description <code>base</code> Object Core color palette for light mode <code>dark</code> Object Color palette overrides for dark mode (inherits values from <code>base</code> if not specified) <code>zebra</code> Boolean/String Enable zebra striping for tables (can be a color value) <code>disable</code> Array Color types to disable (e.g., <code>[\"background\", \"text\"]</code>) <code>darkMode</code> Boolean Force dark mode on initialization (defaults to system preference)"},{"location":"theme/#complete-example","title":"Complete Example","text":"<pre><code>// Initialize theme system with comprehensive palette\nxkin.theme.set({\n  // Use system preference for initial mode\n  darkMode: window.matchMedia(\"(prefers-color-scheme: dark)\").matches,\n\n  // Enable zebra striping for tables with custom color\n  zebra: \"#f5f5f5\",\n\n  // Disable specific color types if needed\n  disable: [],\n\n  // Core color palette (light mode)\n  base: {\n    // Neutrals\n    none: \"transparent\",\n    white: \"#ffffff\",\n    black: \"#000000\",\n    gray: \"#a5a5a5\",\n\n    // UI colors\n    light: \"#f8f9fa\",\n    dark: \"#343a40\",\n    context: \"#6c757d\",\n\n    // Status colors\n    success: \"#28a745\",\n    danger: \"#dc3545\",\n    warning: \"#ffc107\",\n    info: \"#17a2b8\",\n\n    // Brand colors\n    primary: \"#007bff\",\n    secondary: \"#6610f2\",\n    accent: \"#e83e8c\",\n  },\n\n  // Dark mode overrides (only specify what changes)\n  dark: {\n    light: \"#343a40\",\n    dark: \"#f8f9fa\",\n    context: \"#adb5bd\",\n\n    success: \"#0a3622\",\n    danger: \"#a71d2a\",\n    warning: \"#b78603\",\n    info: \"#0f6674\",\n\n    primary: \"#0069d9\",\n    secondary: \"#5b0cdb\",\n    accent: \"#d03072\",\n  },\n});\n\n// Toggle between light and dark modes\ndocument.getElementById(\"theme-toggle\").addEventListener(\"click\", () =&gt; {\n  xkin.theme.toggle();\n});\n\n// Get current theme state\nconsole.log(\"Current dark mode:\", xkin.theme.info.isDark);\n</code></pre>"},{"location":"theme/#responsive-theme-toggle-example","title":"Responsive Theme Toggle Example","text":"<p>Implement a theme toggle that stays in sync with system preferences:</p> <pre><code>// Initial setup\nconst prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\");\nxkin.theme.set({\n  darkMode: prefersDark.matches,\n  // ... other theme options\n});\n\n// Listen for system preference changes\nprefersDark.addEventListener(\"change\", (event) =&gt; {\n  xkin.theme.toggle(event.matches);\n});\n\n// Toggle button\nconst toggleBtn = xkin.control(\"#theme-toggle\");\ntoggleBtn.on(\"click\", () =&gt; {\n  xkin.theme.toggle();\n  updateToggleIcon();\n});\n\nfunction updateToggleIcon() {\n  const isDark = xkin.theme.info.isDark;\n  toggleBtn.theme(isDark ? \"dark\" : \"light\");\n}\n</code></pre>"},{"location":"utils/","title":"Utility Functions","text":"<p>Provides several utility functions to handle common tasks efficiently. These utilities help with DOM selection, class and style manipulation, data transformation, and performance optimization.</p>"},{"location":"utils/#dom-selection-utilities","title":"DOM Selection Utilities","text":""},{"location":"utils/#findattributename-value","title":"<code>find(attributeName, value)</code>","text":"<p>Returns an array of element controllers for all elements with a matching attribute value.</p> <pre><code>// HTML: &lt;button data-role=\"action\"&gt;Save&lt;/button&gt; &lt;button data-role=\"action\"&gt;Cancel&lt;/button&gt;\nconst actionButtons = xkin.find(\"data-role\", \"action\");\n\n// Returns array of controllers for all matching elements\nactionButtons.forEach((button) =&gt; {\n  button.add(\"action-button\");\n});\n</code></pre>"},{"location":"utils/#getattributename-value","title":"<code>get(attributeName, value)</code>","text":"<p>Returns the first element controller with a matching attribute value.</p> <pre><code>// HTML: &lt;nav data-panel=\"sidebar\"&gt;...&lt;/nav&gt;\nconst sidebar = xkin.get(\"data-panel\", \"sidebar\");\n\n// Returns a single controller for the first matching element\nsidebar.add(\"visible\");\n</code></pre>"},{"location":"utils/#class-and-style-manipulation","title":"Class and Style Manipulation","text":""},{"location":"utils/#cssinput","title":"<code>css(input)</code>","text":"<p>Converts various input formats to a single CSS class string. This is useful for combining conditional classes.</p> <pre><code>// Convert array of class names\nconst classes = xkin.css([\"btn\", \"btn-primary\"]);\n// Result: \"btn btn-primary\"\n\n// Mix arrays and objects with conditional classes\nconst buttonClasses = xkin.css([\n  \"btn\",\n  {\n    \"btn-primary\": isPrimary,\n    \"btn-lg\": size === \"large\",\n    \"btn-disabled\": isDisabled,\n  },\n]);\n// Result (if isPrimary and isDisabled are true): \"btn btn-primary btn-disabled\"\n\n// Mix arrays of arrays for complex combinations\nconst mixedClasses = xkin.css([\"card\", [\"card-header\", \"bg-dark\"], { \"is-selected\": isSelected }]);\n// Result (if isSelected is true): \"card card-header bg-dark is-selected\"\n</code></pre>"},{"location":"utils/#styleinput","title":"<code>style(input)</code>","text":"<p>Converts various input formats to a single CSS style string. This is useful for creating inline styles dynamically.</p> <pre><code>// Convert object to style string\nconst styles = xkin.style({\n  width: \"200px\",\n  height: \"100px\",\n  backgroundColor: \"#f5f5f5\",\n});\n// Result: \"width: 200px; height: 100px; background-color: #f5f5f5;\"\n\n// Mix arrays and objects\nconst cardStyles = xkin.style([\n  \"border-radius: 4px;\",\n  {\n    padding: hasContent ? \"16px\" : \"0\",\n    margin: \"8px 0\",\n  },\n]);\n// Result (if hasContent is true): \"border-radius: 4px; padding: 16px; margin: 8px 0;\"\n\n// Conditional inclusion\nconst dynamicStyles = xkin.style([\n  \"position: relative;\",\n  isAbsolute &amp;&amp; \"position: absolute; top: 0; left: 0;\",\n]);\n// Only includes the second style if isAbsolute is true\n</code></pre>"},{"location":"utils/#data-transformation","title":"Data Transformation","text":""},{"location":"utils/#blankschema","title":"<code>blank(schema)</code>","text":"<p>Generates an object from a schema by evaluating function values. This is useful for creating default form values or state objects.</p> <pre><code>// Generate a form object with default values\nconst formDefaults = xkin.blank({\n  name: \"\",\n  email: \"\",\n  age: () =&gt; 18,\n  date: () =&gt; new Date().toISOString().split(\"T\")[0],\n  settings: {\n    notifications: () =&gt; true,\n    theme: \"light\",\n  },\n});\n\n// Result:\n// {\n//   name: \"\",\n//   email: \"\",\n//   age: 18,\n//   date: \"2023-07-15\", // Current date in YYYY-MM-DD format\n//   settings: {\n//     notifications: true,\n//     theme: \"light\"\n//   }\n// }\n</code></pre>"},{"location":"utils/#performance-optimization","title":"Performance Optimization","text":""},{"location":"utils/#memoizefunction-hashfunction-cachesize","title":"<code>memoize(function, [hashFunction], [cacheSize])</code>","text":"<p>Creates a memoized version of a function that caches its results based on input arguments. This is useful for expensive calculations that may be called repeatedly with the same inputs.</p> <pre><code>// Expensive calculation function\nfunction calculateLayout(width, height, items) {\n  console.log(\"Calculating layout...\");\n  // Simulate complex calculation\n  return {\n    width,\n    height,\n    positions: items.map((item, i) =&gt; ({\n      id: item.id,\n      x: i * 10,\n      y: i * 5,\n    })),\n  };\n}\n\n// Create memoized version with default cache size (100)\nconst memoizedCalculate = xkin.memoize(calculateLayout);\n\n// First call calculates and caches\nconst layout1 = memoizedCalculate(800, 600, [{ id: 1 }, { id: 2 }, { id: 3 }]);\n// Console: \"Calculating layout...\"\n\n// Second call with same parameters uses cached result\nconst layout2 = memoizedCalculate(800, 600, [{ id: 1 }, { id: 2 }, { id: 3 }]);\n// No console output, uses cached result\n\n// Different parameters trigger new calculation\nconst layout3 = memoizedCalculate(1024, 768, [{ id: 1 }, { id: 2 }, { id: 3 }]);\n// Console: \"Calculating layout...\"\n</code></pre>"},{"location":"utils/#custom-cache-size","title":"Custom Cache Size","text":"<pre><code>// Limit cache to only most recent 10 results\nconst limitedCache = xkin.memoize(expensiveFunction, undefined, 10);\n</code></pre>"},{"location":"utils/#custom-hash-function","title":"Custom Hash Function","text":"<pre><code>// Custom hash function for complex objects\nconst userCache = xkin.memoize(\n  fetchUserData,\n  (userId, options) =&gt; `${userId}-${options.includeDetails}-${options.filter}`,\n  50\n);\n</code></pre>"},{"location":"utils/#memoizeonefunction-equalitycheck","title":"<code>memoizeOne(function, [equalityCheck])</code>","text":"<p>Creates a memoized function that only remembers the latest arguments and result. This is optimal for functions that are typically called repeatedly with the same recent value.</p> <pre><code>// Original function for processing user data\nfunction processUserData(userId, filters) {\n  console.log(\"Processing data for\", userId);\n  // Expensive operation...\n  return {\n    id: userId,\n    processed: true,\n    filters,\n  };\n}\n\n// Create memoized version that only remembers most recent call\nconst memoizedProcess = xkin.memoizeOne(processUserData);\n\n// First call processes and caches\nmemoizedProcess(\"user123\", [\"active\"]);\n// Console: \"Processing data for user123\"\n\n// Same parameters use cached result\nmemoizedProcess(\"user123\", [\"active\"]);\n// No console output, uses cached result\n\n// Different parameters replace the cache\nmemoizedProcess(\"user456\", [\"active\"]);\n// Console: \"Processing data for user456\"\n\n// Original parameters now require reprocessing\nmemoizedProcess(\"user123\", [\"active\"]);\n// Console: \"Processing data for user123\"\n</code></pre>"},{"location":"utils/#real-world-use-cases","title":"Real-World Use Cases","text":""},{"location":"utils/#responsive-component-styling","title":"Responsive Component Styling","text":"<pre><code>// Define responsive style generator\nconst getResponsiveStyles = xkin.memoize((width, isMobile) =&gt; {\n  return {\n    container: xkin.style({\n      width: width + \"px\",\n      padding: isMobile ? \"8px\" : \"16px\",\n      fontSize: isMobile ? \"14px\" : \"16px\",\n    }),\n    header: xkin.css([\"component-header\", { \"mobile-header\": isMobile }]),\n  };\n});\n\n// Use in a component\nwindow.addEventListener(\"resize\", () =&gt; {\n  const width = window.innerWidth;\n  const isMobile = width &lt; 768;\n\n  // Gets cached result if dimensions haven't changed\n  const styles = getResponsiveStyles(width, isMobile);\n\n  const container = xkin.control(\"#app-container\");\n  const header = xkin.control(\"#app-header\");\n\n  container.current.setAttribute(\"style\", styles.container);\n  header.current.className = styles.header;\n});\n</code></pre>"},{"location":"utils/#form-data-handling","title":"Form Data Handling","text":"<pre><code>// Generate default form values\nconst defaultForm = xkin.blank({\n  username: \"\",\n  email: \"\",\n  preferences: {\n    theme: \"light\",\n    notifications: () =&gt; true,\n    fontSize: () =&gt; localStorage.getItem(\"fontSize\") || \"medium\",\n  },\n});\n\n// Reset form to defaults\ndocument.querySelector(\"#reset-button\").addEventListener(\"click\", () =&gt; {\n  const form = document.querySelector(\"#settings-form\");\n  const formData = xkin.blank(defaultForm);\n\n  // Apply values to form elements\n  Object.entries(formData).forEach(([key, value]) =&gt; {\n    if (typeof value === \"object\") {\n      Object.entries(value).forEach(([subKey, subValue]) =&gt; {\n        const field = form.querySelector(`[name=\"${key}.${subKey}\"]`);\n        if (field) field.value = subValue;\n      });\n    } else {\n      const field = form.querySelector(`[name=\"${key}\"]`);\n      if (field) field.value = value;\n    }\n  });\n});\n</code></pre>"},{"location":"integration/alpine/","title":"Alpine","text":"<p>Using <code>xkin.component</code> with Alpine.</p>"},{"location":"integration/alpine/#html-indexhtml","title":"HTML <code>index.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Alpine&lt;/title&gt;\n\n    &lt;script src=\"//unpkg.com/alpinejs\" defer&gt;&lt;/script&gt;\n\n    &lt;script src=\"https://unpkg.com/xkin@latest\" type=\"text/javascript\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;div x-data=\"{ count: 0, mode: null, disabled: true }\"&gt;\n      &lt;button\n        @click=\"() =&gt; { count++; disabled = !disabled; mode ? (mode = null) : (mode = 'active'); }\"\n        x-theme=\"$theme('button', mode, { size: 'sm', height: '40px', disabled: disabled })\"\n      &gt;\n        Increment\n      &lt;/button&gt;\n\n      &lt;span x-text=\"count\"&gt;&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;script src=\"./main.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"integration/alpine/#javascript-mainjs","title":"JavaScript <code>main.js</code>","text":"<pre><code>/**\n * @xkin\n */\nconst Button = xkin.component({\n  base: {\n    class: \"button\",\n  },\n  setup: ({ size, disabled, height }) =&gt; ({\n    class: {\n      \"is-small\": size === \"sm\",\n      \"is-large\": size === \"lg\",\n      \"is-disabled\": disabled,\n    },\n    style: { height: height },\n  }),\n  theme: {\n    active: {\n      class: \"color-bg-success\",\n      style: \"\",\n    },\n    error: {\n      class: \"color-bg-danger\",\n      style: \"\",\n    },\n  },\n});\n\nconst Components = {\n  button: Button,\n};\n\ndocument.addEventListener(\"alpine:init\", () =&gt; {\n  // Magic\n  Alpine.magic(\"theme\", () =&gt; {\n    return (name, mode, props) =&gt; ({\n      name: name,\n      mode: mode,\n      props: { ...(props || {}) },\n    });\n  });\n\n  // Directive\n  Alpine.directive(\"theme\", (el, { expression }, { evaluateLater, effect }) =&gt; {\n    let getData = evaluateLater(expression);\n    effect(() =&gt; {\n      // Reactive\n      getData((data) =&gt; {\n        const current = Components[data.name];\n        const css = current(data.props).theme(data.mode);\n\n        // Set CSS\n        el.className = css.class;\n        el.setAttribute(\"style\", css.style);\n      });\n    });\n  });\n});\n</code></pre>"},{"location":"integration/preact/","title":"Preact","text":"<p>Using <code>xkin.component</code> with Preact.</p>"},{"location":"integration/preact/#create-component","title":"Create Component","text":"<pre><code>import { useState } from \"preact/hooks\";\n\n/**\n * @xkin\n */\nconst Styled = xkin.component({\n  base: {\n    class: \"button\",\n  },\n  setup: ({ size, disabled, height }) =&gt; ({\n    class: {\n      \"is-small\": size === \"sm\",\n      \"is-large\": size === \"lg\",\n      \"is-disabled\": disabled,\n    },\n    style: { height: height },\n  }),\n  theme: {\n    active: {\n      class: \"color-bg-success\",\n      style: \"\",\n    },\n    error: {\n      class: \"color-bg-danger\",\n      style: \"\",\n    },\n  },\n});\n\nexport default function Button(props) {\n  const [count, setCount] = useState(0);\n  const add = () =&gt; setCount((count) =&gt; count + 1);\n\n  /**\n   * @xkin\n   */\n  const css = Styled(props).theme(props.mode);\n\n  return (\n    &lt;button type=\"button\" onClick={add} class={css.class} style={css.style}&gt;\n      count is {count}\n    &lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"integration/preact/#use-component","title":"Use Component","text":"<pre><code>import { useState, useEffect } from \"preact/hooks\";\n\nimport CustomButton from \"./components/Button\";\n\nexport function App() {\n  const [disabled, setDisabled] = useState(null);\n  const [mode, setMode] = useState(null);\n\n  useEffect(() =&gt; {\n    const disabledInterval = setInterval(() =&gt; {\n      setDisabled((prevDisabled) =&gt; !prevDisabled);\n    }, 5000);\n\n    const modeInterval = setInterval(() =&gt; {\n      setMode((prevMode) =&gt; (prevMode === null ? \"active\" : null));\n    }, 1000);\n\n    // Clean up intervals on component unmount\n    return () =&gt; {\n      clearInterval(disabledInterval);\n      clearInterval(modeInterval);\n    };\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;CustomButton size=\"sm\" height=\"40px\" mode={mode} disabled={disabled} /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"integration/vue/","title":"Vue","text":"<p>Using <code>xkin.component</code> with Vue.</p>"},{"location":"integration/vue/#using-computed","title":"Using Computed","text":""},{"location":"integration/vue/#create-component","title":"Create Component","text":"<pre><code>&lt;script setup&gt;\n  import { computed } from \"vue\";\n\n  const props = defineProps([\"size\", \"disabled\", \"height\", \"mode\"]);\n\n  const css = computed(() =&gt; {\n    return xkin\n      .component({\n        base: {\n          class: \"button\",\n        },\n        setup: ({ size, disabled, height }) =&gt; ({\n          class: {\n            \"is-small\": size === \"sm\",\n            \"is-large\": size === \"lg\",\n            \"is-disabled\": disabled,\n          },\n          style: { height: height },\n        }),\n        theme: {\n          active: {\n            class: \"color-bg-success\",\n            style: \"\",\n          },\n          error: {\n            class: \"color-bg-danger\",\n            style: \"\",\n          },\n        },\n      })(props)\n      .theme(props.mode);\n  });\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;button type=\"button\" @click=\"count++\" :class=\"css.class\" :style=\"css.style\"&gt;\n    count is {{ count }}\n  &lt;/button&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"integration/vue/#use-component","title":"Use Component","text":"<pre><code>&lt;script setup&gt;\n  import CustomButton from \"./components/CustomButton.vue\";\n\n  import { ref } from \"vue\";\n\n  const disabled = ref(null);\n  const mode = ref(null);\n\n  setInterval(() =&gt; {\n    disabled.value = !disabled.value;\n  }, 2000);\n\n  setInterval(() =&gt; {\n    if (!mode.value) {\n      mode.value = \"active\";\n    } else {\n      mode.value = null;\n    }\n  }, 1000);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Custom Button&lt;/h1&gt;\n    &lt;CustomButton size=\"sm\" height=\"40px\" :mode=\"mode\" :disabled=\"disabled\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"integration/vue/#using-directives","title":"Using Directives","text":""},{"location":"integration/vue/#create-directive","title":"Create Directive","text":"<pre><code>const handleCSS = (el, props) =&gt; {\n  /**\n   * @xkin\n   */\n  const css = el.__css__(props).theme(props.mode);\n  el.className = css.class;\n  el.setAttribute(\"style\", css.style);\n};\n\nconst themeDirective = {\n  created(el, { value, arg }) {\n    if (!arg) {\n      el.__css__ = value;\n    } else if (arg === \"props\") {\n      handleCSS(el, value);\n    }\n  },\n  updated(el, { value, arg }) {\n    if (arg === \"props\") {\n      handleCSS(el, value);\n    }\n  },\n};\n</code></pre>"},{"location":"integration/vue/#register","title":"Register","text":"<pre><code>import { createApp } from \"vue\";\nimport App from \"./App.vue\";\n\nconst app = createApp(App);\n\n// Register\napp.directive(\"theme\", themeDirective);\n\napp.mount(\"#app\");\n</code></pre>"},{"location":"integration/vue/#create-component_1","title":"Create Component","text":"<pre><code>&lt;script setup&gt;\n  import { ref } from \"vue\";\n\n  const props = defineProps([\"size\", \"disabled\", \"height\", \"mode\"]);\n\n  const count = ref(0);\n\n  /**\n   * @xkin\n   */\n  const component = xkin.component({\n    base: {\n      class: \"button\",\n    },\n    setup: ({ size, disabled, height }) =&gt; ({\n      class: {\n        \"is-small\": size === \"sm\",\n        \"is-large\": size === \"lg\",\n        \"is-disabled\": disabled,\n      },\n      style: { height: height },\n    }),\n    theme: {\n      active: {\n        class: \"color-bg-success\",\n        style: \"\",\n      },\n      error: {\n        class: \"color-bg-danger\",\n        style: \"\",\n      },\n    },\n  });\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;button\n    type=\"button\"\n    @click=\"count++\"\n    v-theme=\"component\"\n    v-theme:props=\"props\"\n  &gt;\n    count is {{ count }}\n  &lt;/button&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"integration/vue/#use-component_1","title":"Use Component","text":"<pre><code>&lt;script setup&gt;\n  import CustomButton from \"./components/CustomButton.vue\";\n\n  import { ref } from \"vue\";\n\n  const disabled = ref(null);\n  const mode = ref(null);\n\n  setInterval(() =&gt; {\n    disabled.value = !disabled.value;\n  }, 2000);\n\n  setInterval(() =&gt; {\n    if (!mode.value) {\n      mode.value = \"active\";\n    } else {\n      mode.value = null;\n    }\n  }, 1000);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Custom Button&lt;/h1&gt;\n    &lt;CustomButton size=\"sm\" height=\"40px\" :mode=\"mode\" :disabled=\"disabled\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"}]}