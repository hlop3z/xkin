{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to X-Kin","text":"<p>XKin is a modern, super lightweight alternative to jQuery, designed specifically for color palette design and styling. It provides simple control for existing elements and basic layout management. The library includes features for applying styles and classes, handling complex components, and integrating a theme system. Additionally, it offers tools for extending other projects, such as Vue, Alpine, and Preact.</p>"},{"location":"#cdn-install","title":"CDN Install","text":"<pre><code>&lt;script src=\"https://unpkg.com/xkin@latest\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"#features","title":"Features","text":"Name Description <code>control</code> Control and manage existing elements <code>gui</code> Initialize and configure the layout <code>$gui</code> Manage and control the layout <code>find</code> Custom <code>querySelectorAll</code> implementation <code>get</code> Custom <code>querySelector</code> implementation <code>style</code> Convert object to <code>CSS</code> styles <code>class</code> Convert object to <code>CSS</code> classes <code>theme</code> Build and inject <code>CSS</code> for themes <code>component</code> Style and manage complex components <code>blankForm</code> Generate a form object from a schema"},{"location":"component/","title":"Components","text":"<p>Define and configure a component with class, style, attributes, and theme.</p>"},{"location":"component/#attributes","title":"Attributes","text":"Name Description <code>base</code> Static core styling <code>attrs()</code> Additional element attributes <code>setup()</code> Dynamic base styling <code>theme</code> Themes as <code>class</code> &amp; <code>style</code> objects"},{"location":"component/#example","title":"Example","text":"<pre><code>const myComponent = {\n  base: {\n    class: \"button\",\n    style: \"\",\n  },\n  attrs: (props) =&gt; ({\n    type: props.type ? props.type : \"button\",\n  }),\n  setup: ({ size, disabled, height }) =&gt; ({\n    class: {\n      \"is-small\": size === \"sm\",\n      \"is-large\": size === \"lg\",\n      \"is-disabled\": disabled,\n    },\n    style: { height: height },\n  }),\n  theme: {\n    active: {\n      class: \"color-bg-success\",\n      style: \"\",\n    },\n    error: {\n      class: \"color-bg-danger\",\n      style: \"\",\n    },\n  },\n};\n\n// Reusable Component\nconst component = xkin.component(myComponent);\n\nconst Button = component({\n  type: \"submit\",\n  size: \"sm\",\n  disabled: true,\n  height: \"40px\",\n});\n\n// Component Attributes\nconsole.log(Button);\n\n// Build Themes.\nsetTimeout(() =&gt; {\n  const active = Button.theme(\"active\");\n  const error = Button.theme(\"error\");\n  console.log(active);\n  console.log(error);\n}, 1000);\n</code></pre>"},{"location":"component/#explanation","title":"Explanation","text":"<ul> <li><code>base</code>: Define the static core styling with <code>class</code> and <code>style</code>.</li> <li><code>attrs()</code>: Function to define additional attributes based on props.</li> <li><code>setup()</code>: Function to define dynamic base styling based on custom properties such as <code>size</code>, <code>disabled</code>, and <code>height</code>.</li> <li><code>theme</code>: Object defining different themes with their respective <code>class</code> and <code>style</code>.</li> </ul>"},{"location":"component/#example-usage","title":"Example Usage","text":"<ol> <li>Define the Component: Create a component object with <code>base</code>, <code>attrs</code>, <code>setup</code>, and <code>theme</code>.</li> <li>Create an Instance: Use the <code>xkin.component</code> function to create an instance of the component with specific properties.</li> <li>Access Themes: Use the <code>theme</code> function of the component instance to build different themes.</li> </ol> <p>The example demonstrates how to define a button component with various configurations and build themes dynamically.</p>"},{"location":"control/","title":"Control","text":"<pre><code>&lt;button id=\"my-button\"&gt;Click Me&lt;/button&gt;\n</code></pre> <pre><code>const element = document.querySelector(\"#my-button\");\n\nconst admin = xkin.control(element);\n// OR\nconst admin = xkin.control(\"#my-button\");\n</code></pre>"},{"location":"control/#attributes","title":"Attributes","text":"Name Description <code>current</code> Get current element <code>add</code> Add class(es) to the current element <code>remove</code> Remove class(es) from the current element <code>toggle</code> Toggle class(es) on the current element <code>hide</code> Hide the current element <code>show</code> Show the current element <code>css</code> Set the component theme configurations <code>theme</code> Activate a theme configuration <code>contains</code> Check if the current element contains a class <code>find</code> Perform <code>querySelectorAll</code> on the current element <code>get</code> Perform <code>querySelector</code> on the current element"},{"location":"control/#current","title":"Current","text":"<pre><code>const admin = xkin.control(\"#my-button\");\n\nconsole.log(admin.current);\n</code></pre>"},{"location":"control/#add-remove-and-toggle","title":"Add, Remove, and Toggle","text":"<pre><code>const admin = xkin.control(\"#my-button\");\n\nadmin.add(\"active-class\", \"other-class\");\nadmin.remove(\"active-class\", \"other-class\");\nadmin.toggle(\"active\", \"is-open\");\n</code></pre>"},{"location":"control/#hide-and-show","title":"Hide and Show","text":"<pre><code>const admin = xkin.control(\"#my-button\");\n\nadmin.hide();\nsetTimeout(() =&gt; admin.show(), 1000);\n</code></pre>"},{"location":"control/#css-and-theme","title":"CSS and Theme","text":"<pre><code>const admin = xkin.control(\"#my-button\");\n\nadmin.css({\n  active: {\n    class: \"color-bg-success\",\n    style: \"height: 60px\",\n  },\n  error: {\n    class: \"color-bg-danger\",\n    style: \"height: 40px\",\n  },\n});\n\n// Activate \"active\" theme\nadmin.theme(\"active\");\n\n// Switch to \"error\" theme\nsetTimeout(() =&gt; admin.theme(\"error\"), 1500);\n\n// Reset theme\nsetTimeout(() =&gt; admin.theme(), 3000);\n</code></pre>"},{"location":"control/#contains","title":"Contains","text":"<pre><code>const admin = xkin.control(\"#my-button\");\n\nconsole.log(admin.contains(\"is-small\"));\n</code></pre>"},{"location":"control/#get-and-find","title":"Get and Find","text":"<pre><code>&lt;div id=\"container\"&gt;\n  &lt;button class=\"single\"&gt;Click Me&lt;/button&gt;\n  &lt;span class=\"group\"&gt;One&lt;/span&gt;\n  &lt;span class=\"group\"&gt;Two&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  const admin = xkin.control(\"#container\");\n\n  const button = admin.get(\".single\"); // querySelector\n  const groups = admin.find(\".group\"); // querySelectorAll\n&lt;/script&gt;\n</code></pre>"},{"location":"gui/","title":"GUI","text":"<ul> <li><code>gui</code> Initialize and configure the layout</li> <li><code>$gui</code> Manage and control the layout</li> </ul> <pre><code>&lt;div&gt;\n  &lt;aside x-attr=\"left-id\"&gt;Left&lt;/aside&gt;\n  &lt;aside x-attr=\"right-id\"&gt;Right&lt;/aside&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n  // Attribute to look for in elements\n  xkin.gui(\"x-attr\", {\n    left: \"left-id\",\n    right: \"right-id\",\n  });\n\n  // Control the specified elements\n  setInterval(() =&gt; {\n    xkin.$gui.left.toggle(\"open\");\n    xkin.$gui.right.toggle(\"open\");\n  }, 1000);\n&lt;/script&gt;\n</code></pre>"},{"location":"theme/","title":"Theme","text":""},{"location":"theme/#methods","title":"Methods","text":"Method Description <code>set</code> Configure and apply a theme <code>class</code> Get class types such as (<code>background</code>, <code>border</code>, <code>text</code>, <code>table</code>) <code>toggle</code> Toggle between themes <code>info</code> Retrieve the current theme"},{"location":"theme/#color-types","title":"Color Types","text":"<ul> <li>Background =&gt; <code>bg</code></li> <li>Text =&gt; <code>tx</code></li> <li>Border =&gt; <code>br</code></li> <li>Table =&gt; <code>tb</code></li> </ul> <pre><code>xkin.theme.class(\"background\", \"white\");\n</code></pre>"},{"location":"theme/#applying-theme-classes","title":"Applying Theme Classes","text":"<pre><code>&lt;!-- Background --&gt;\n&lt;div class=\"color-bg-&lt;themeColor&gt;\"&gt;&lt;/div&gt;\n\n&lt;!-- Text --&gt;\n&lt;div class=\"color-tx-&lt;themeColor&gt;\"&gt;&lt;/div&gt;\n\n&lt;!-- Border --&gt;\n&lt;div class=\"color-br-&lt;themeColor&gt;\"&gt;&lt;/div&gt;\n\n&lt;!-- Table --&gt;\n&lt;div class=\"color-tb-&lt;themeColor&gt;\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"theme/#themeset-options","title":"<code>theme.set</code> Options","text":"Option Description <code>base</code> Core theme configuration <code>dark</code> Dark theme configuration <code>zebra</code> Zebra stripe pattern for tables <code>disable</code> Disable specific color types <code>darkMode</code> Enable dark mode"},{"location":"theme/#example-configuration","title":"Example Configuration","text":"<pre><code>const isDark =\n  window.matchMedia &amp;&amp;\n  window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\nxkin.theme.set({\n  darkMode: isDark,\n  zebra: true, // Enable zebra striping for tables\n  disable: [\n    //  Disable specific color types if needed:\n    // \"text\", \"background\", \"border\", \"table\"\n  ],\n  base: {\n    // Core colors\n    none: \"transparent\", // No color\n    white: \"white\", // White\n    black: \"black\", // Black\n    gray: \"#a5a5a5\", // Gray\n\n    // Basic colors\n    light: \"#fff\", // Light\n    dark: \"#424242\", // Dark\n    context: \"#616161\", // Contextual color\n\n    // Utility colors\n    success: \"#4CAF50\", // Success\n    danger: \"#F44336\", // Danger\n    warning: \"#ff9800\", // Warning\n    info: \"#2196F3\", // Info\n\n    // Theme colors\n    primary: \"#ba68c8\", // Primary\n    secondary: \"#c2185b\", // Secondary\n  },\n  dark: {\n    // Basic colors for dark mode\n    context: \"#a5a5a5\", // Contextual color\n\n    // Utility colors for dark mode\n    success: \"#0f5132\", // Success\n    danger: \"#B71C1C\", // Danger\n    warning: \"#ff9800\", // Warning\n    info: \"#2196F3\", // Info\n\n    // Theme colors for dark mode\n    primary: \"#ba68c8\", // Primary\n    secondary: \"#c2185b\", // Secondary\n  },\n});\n</code></pre>"},{"location":"utils/","title":"Utils","text":""},{"location":"utils/#find","title":"<code>find</code>","text":"<pre><code>xkin.find(\"custom-attr\", \"the-value\");\n</code></pre>"},{"location":"utils/#get","title":"<code>get</code>","text":"<pre><code>xkin.get(\"custom-attr\", \"the-value\");\n</code></pre>"},{"location":"utils/#blankform","title":"<code>blankForm</code>","text":"<p>Generate a form object from a schema.</p> <pre><code>// Form from schema\nxkin.blankForm({ key: \"one\", val: () =&gt; \"hello world\" });\n</code></pre>"},{"location":"utils/#class","title":"<code>class</code>","text":"<p>Convert objects to a single class string.</p> <pre><code>// Object-To-Class\nxkin.class([\n  \"my-class\",\n  [\"other-class\", \"extra-class\"],\n  { \"is-small-class\": true },\n]);\n</code></pre>"},{"location":"utils/#style","title":"<code>style</code>","text":"<p>Convert objects to a single style string.</p> <pre><code>// Object-To-Style\nxkin.style([\n  \"width: 40px;\",\n  [\"overflow-x: auto;\", \"overflow-y: auto;\"],\n  { height: \"40px\" },\n]);\n</code></pre>"},{"location":"integration/alpine/","title":"Alpine","text":"<p>Using <code>xkin.component</code> with Alpine.</p>"},{"location":"integration/alpine/#html-indexhtml","title":"HTML <code>index.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Alpine&lt;/title&gt;\n\n    &lt;script src=\"//unpkg.com/alpinejs\" defer&gt;&lt;/script&gt;\n\n    &lt;script src=\"https://unpkg.com/xkin@latest\" type=\"text/javascript\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;div x-data=\"{ count: 0, mode: null, disabled: true }\"&gt;\n      &lt;button\n        @click=\"() =&gt; { count++; disabled = !disabled; mode ? (mode = null) : (mode = 'active'); }\"\n        x-theme=\"$theme('button', mode, { size: 'sm', height: '40px', disabled: disabled })\"\n      &gt;\n        Increment\n      &lt;/button&gt;\n\n      &lt;span x-text=\"count\"&gt;&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;script src=\"./main.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"integration/alpine/#javascript-mainjs","title":"JavaScript <code>main.js</code>","text":"<pre><code>/**\n * @xkin\n */\nconst Button = xkin.component({\n  base: {\n    class: \"button\",\n  },\n  setup: ({ size, disabled, height }) =&gt; ({\n    class: {\n      \"is-small\": size === \"sm\",\n      \"is-large\": size === \"lg\",\n      \"is-disabled\": disabled,\n    },\n    style: { height: height },\n  }),\n  theme: {\n    active: {\n      class: \"color-bg-success\",\n      style: \"\",\n    },\n    error: {\n      class: \"color-bg-danger\",\n      style: \"\",\n    },\n  },\n});\n\nconst Components = {\n  button: Button,\n};\n\ndocument.addEventListener(\"alpine:init\", () =&gt; {\n  // Magic\n  Alpine.magic(\"theme\", () =&gt; {\n    return (name, mode, props) =&gt; ({\n      name: name,\n      mode: mode,\n      props: { ...(props || {}) },\n    });\n  });\n\n  // Directive\n  Alpine.directive(\"theme\", (el, { expression }, { evaluateLater, effect }) =&gt; {\n    let getData = evaluateLater(expression);\n    effect(() =&gt; {\n      // Reactive\n      getData((data) =&gt; {\n        const current = Components[data.name];\n        const css = current(data.props).theme(data.mode);\n\n        // Set CSS\n        el.className = css.class;\n        el.setAttribute(\"style\", css.style);\n      });\n    });\n  });\n});\n</code></pre>"},{"location":"integration/preact/","title":"Preact","text":"<p>Using <code>xkin.component</code> with Preact.</p>"},{"location":"integration/preact/#create-component","title":"Create Component","text":"<pre><code>import { useState } from \"preact/hooks\";\n\nexport default function Button(props) {\n  const [count, setCount] = useState(0);\n  const add = () =&gt; setCount((count) =&gt; count + 1);\n\n  /**\n   * @xkin\n   */\n  const css = Styled(props).theme(props.mode);\n\n  return (\n    &lt;button type=\"button\" onClick={add} class={css.class} style={css.style}&gt;\n      count is {count}\n    &lt;/button&gt;\n  );\n}\n\n/**\n * @xkin\n */\nconst Styled = xkin.component({\n  base: {\n    class: \"button\",\n  },\n  setup: ({ size, disabled, height }) =&gt; ({\n    class: {\n      \"is-small\": size === \"sm\",\n      \"is-large\": size === \"lg\",\n      \"is-disabled\": disabled,\n    },\n    style: { height: height },\n  }),\n  theme: {\n    active: {\n      class: \"color-bg-success\",\n      style: \"\",\n    },\n    error: {\n      class: \"color-bg-danger\",\n      style: \"\",\n    },\n  },\n});\n</code></pre>"},{"location":"integration/preact/#use-component","title":"Use Component","text":"<pre><code>import { useState, useEffect } from \"preact/hooks\";\n\nimport CustomButton from \"./components/Button\";\n\nexport function App() {\n  const [disabled, setDisabled] = useState(null);\n  const [mode, setMode] = useState(null);\n\n  useEffect(() =&gt; {\n    const disabledInterval = setInterval(() =&gt; {\n      setDisabled((prevDisabled) =&gt; !prevDisabled);\n    }, 5000);\n\n    const modeInterval = setInterval(() =&gt; {\n      setMode((prevMode) =&gt; (prevMode === null ? \"active\" : null));\n    }, 1000);\n\n    // Clean up intervals on component unmount\n    return () =&gt; {\n      clearInterval(disabledInterval);\n      clearInterval(modeInterval);\n    };\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;CustomButton size=\"sm\" height=\"40px\" mode={mode} disabled={disabled} /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"integration/vue/","title":"Vue","text":"<p>Using <code>xkin.component</code> with Vue.</p>"},{"location":"integration/vue/#using-computed","title":"Using Computed","text":""},{"location":"integration/vue/#create-component","title":"Create Component","text":"<pre><code>&lt;script setup&gt;\n  import { computed } from \"vue\";\n\n  const props = defineProps([\"size\", \"disabled\", \"height\", \"mode\"]);\n\n  const css = computed(() =&gt; {\n    return xkin\n      .component({\n        base: {\n          class: \"button\",\n        },\n        setup: ({ size, disabled, height }) =&gt; ({\n          class: {\n            \"is-small\": size === \"sm\",\n            \"is-large\": size === \"lg\",\n            \"is-disabled\": disabled,\n          },\n          style: { height: height },\n        }),\n        theme: {\n          active: {\n            class: \"color-bg-success\",\n            style: \"\",\n          },\n          error: {\n            class: \"color-bg-danger\",\n            style: \"\",\n          },\n        },\n      })(props)\n      .theme(props.mode);\n  });\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;button type=\"button\" @click=\"count++\" :class=\"css.class\" :style=\"css.style\"&gt;\n    count is {{ count }}\n  &lt;/button&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"integration/vue/#use-component","title":"Use Component","text":"<pre><code>&lt;script setup&gt;\n  import CustomButton from \"./components/CustomButton.vue\";\n\n  import { ref } from \"vue\";\n\n  const disabled = ref(null);\n  const mode = ref(null);\n\n  setInterval(() =&gt; {\n    disabled.value = !disabled.value;\n  }, 2000);\n\n  setInterval(() =&gt; {\n    if (!mode.value) {\n      mode.value = \"active\";\n    } else {\n      mode.value = null;\n    }\n  }, 1000);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Custom Button&lt;/h1&gt;\n    &lt;CustomButton size=\"sm\" height=\"40px\" :mode=\"mode\" :disabled=\"disabled\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"integration/vue/#using-directives","title":"Using Directives","text":""},{"location":"integration/vue/#create-directive","title":"Create Directive","text":"<pre><code>const handleCSS = (el, props) =&gt; {\n  /**\n   * @xkin\n   */\n  const css = el.__css__(props).theme(props.mode);\n  el.className = css.class;\n  el.setAttribute(\"style\", css.style);\n};\n\nconst themeDirective = {\n  created(el, { value, arg }) {\n    if (!arg) {\n      el.__css__ = value;\n    } else if (arg === \"props\") {\n      handleCSS(el, value);\n    }\n  },\n  updated(el, { value, arg }) {\n    if (arg === \"props\") {\n      handleCSS(el, value);\n    }\n  },\n};\n</code></pre>"},{"location":"integration/vue/#register","title":"Register","text":"<pre><code>import { createApp } from \"vue\";\nimport App from \"./App.vue\";\n\nconst app = createApp(App);\n\n// Register\napp.directive(\"theme\", themeDirective);\n\napp.mount(\"#app\");\n</code></pre>"},{"location":"integration/vue/#create-component_1","title":"Create Component","text":"<pre><code>&lt;script setup&gt;\n  import { ref } from \"vue\";\n\n  const props = defineProps([\"size\", \"disabled\", \"height\", \"mode\"]);\n\n  const count = ref(0);\n\n  /**\n   * @xkin\n   */\n  const component = xkin.component({\n    base: {\n      class: \"button\",\n    },\n    setup: ({ size, disabled, height }) =&gt; ({\n      class: {\n        \"is-small\": size === \"sm\",\n        \"is-large\": size === \"lg\",\n        \"is-disabled\": disabled,\n      },\n      style: { height: height },\n    }),\n    theme: {\n      active: {\n        class: \"color-bg-success\",\n        style: \"\",\n      },\n      error: {\n        class: \"color-bg-danger\",\n        style: \"\",\n      },\n    },\n  });\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;button\n    type=\"button\"\n    @click=\"count++\"\n    v-theme=\"component\"\n    v-theme:props=\"props\"\n  &gt;\n    count is {{ count }}\n  &lt;/button&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"integration/vue/#use-component_1","title":"Use Component","text":"<pre><code>&lt;script setup&gt;\n  import CustomButton from \"./components/CustomButton.vue\";\n\n  import { ref } from \"vue\";\n\n  const disabled = ref(null);\n  const mode = ref(null);\n\n  setInterval(() =&gt; {\n    disabled.value = !disabled.value;\n  }, 2000);\n\n  setInterval(() =&gt; {\n    if (!mode.value) {\n      mode.value = \"active\";\n    } else {\n      mode.value = null;\n    }\n  }, 1000);\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Custom Button&lt;/h1&gt;\n    &lt;CustomButton size=\"sm\" height=\"40px\" :mode=\"mode\" :disabled=\"disabled\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"}]}